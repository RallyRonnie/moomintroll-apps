<!DOCTYPE html>
<html>
<head>
    <title>TS Initiative Percentage View</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Tue Dec 20 2016 12:42:13 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Dec 20 2016 12:42:13 GMT-0800 (PST)";
        var STORY    = "F166";
        var BUILDER  = "jmartin";
        var CHECKSUM = 21549040464;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) -->
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('CA.agile.technicalservices.util.WsapiUtils',{
    singleton: true,
    
    // given a store config, loads the records while returning a promise
    loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');
        var default_config = {
            autoLoad: true
        };
        var store_config = Ext.Object.merge(default_config, config);

        Ext.create('Rally.data.wsapi.Store',store_config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    
    // given a store config, loads the records while returning a promise
    loadSnapshotRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');

        var default_config = {
            removeUnauthorizedSnapshots: true
        };
        
        var store_config = Ext.Object.merge(default_config, config);
        
        Ext.create('Rally.data.lookback.SnapshotStore',store_config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    
    getPortfolioItemTypes: function(workspace) {
        var deferred = Ext.create('Deft.Deferred');
                
        var store_config = {
            fetch: ['Name','ElementName','TypePath'],
            model: 'TypeDefinition',
            filters: [
                {
                    property: 'TypePath',
                    operator: 'contains',
                    value: 'PortfolioItem/'
                }
            ],
            sorters: [ {property:'Ordinal', direction: 'ASC'}],
            autoLoad: true,
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Failed to load types');
                    }
                }
            }
        };
        
        if ( !Ext.isEmpty(workspace) ) {
            store_config.context = { 
                project:null,
                workspace: workspace._ref ? workspace._ref : workspace.get('_ref')
            };
        }
                
        var store = Ext.create('Rally.data.wsapi.Store', store_config );
                    
        return deferred.promise;
    },
    
    loadWsapiRecordsParallel: function(store_config){
        var deferred = Ext.create('Deft.Deferred'),
            promises = [],
            thread_count = 9,
            me = this;

        var config = Ext.Object.merge({
            pageSize: 2000
        },store_config);
        
        config.autoLoad = false;
        config.limit    = config.pageSize;
        
        this.fetchWsapiCount(store_config).then({
            success: function(totalCount){
                var store = Ext.create('Rally.data.wsapi.Store', config),
                    totalPages = Math.ceil(totalCount/config.pageSize);

                var pages = _.range(1,totalPages+1,1);

                _.each(pages, function(page){
                    promises.push(function () {
                        return me.loadStorePage(page, store);
                    });
                });

                PortfolioItemCostTracking.promise.ParallelThrottle.throttle(promises, thread_count, me).then({
                    success: function(results){
                        deferred.resolve(_.flatten(results));
                    },
                    failure: function(msg){
                        deferred.reject(Ext.String.format("Parallel Load Problem:", msg));
                    }
                });
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    
    fetchWsapiCount: function(store_config){
        var deferred = Ext.create('Deft.Deferred');

        var config = Ext.Object.merge(store_config, {
            fetch: ['ObjectID'],
            limit: 1,
            pageSize: 1
        });
        
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Count Problem: {1}", operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    
    loadStorePage: function(pageNum, store){
        var deferred = Ext.create('Deft.Deferred');
        
        store.loadPage(pageNum, {
            callback: function(records, operation){
                
                if (operation.wasSuccessful()){
                     deferred.resolve(records);
                } else {
                    console.error('Operation:', operation);
                    var msg = operation.error && operation.error.errors.join(',');
                    if ( Ext.isEmpty(msg) ) {
                        deferred.reject('Network issue while loading store page');
                    } else {
                        deferred.reject(msg + " (lsp)");
                    }
                }
            }
        });

        return deferred;
    },
    
    fetchAllowedValues: function(model_name, field_name) {
        var deferred = Ext.create('Deft.Deferred');
        console.log(model_name, field_name);
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(allowed_values, operation, success) {
                        deferred.resolve(Ext.Array.map(allowed_values, function(allowed_value){
                            return allowed_value.get('StringValue');
                        }));
                    }
                });
            }
        });
        return deferred.promise;
    }
    
});
Ext.define('TSKeys',{
    singleton: true,
    
    percentageKeyPrefix: 'ca.ts.percentage'
    
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('TSDateCalculator',{
    singleton: true,
    
    // all of the first day counts as 1 day.  So December 1 at 5am is 1 day, so is 6pm.
    getDaysAfterMonthEnd: function(check_date) {
        var month = check_date.getMonth();
        var year = check_date.getFullYear();
        var month_end = new Date(year,month,1);
        
        return Rally.util.DateTime.getDifference(check_date,month_end,'day') + 1;
    },
    
    // all of the last day counts as 1 day.  So December 31 at 5am is 1 day, so is 6pm.
    getDaysBeforeMonthEnd: function(check_date) {
        var month = check_date.getMonth();
        var year = check_date.getFullYear();
        var month_end = Rally.util.DateTime.add(new Date(year,month,1),'month',1);
        
        return Rally.util.DateTime.getDifference(month_end,check_date,'day') + 1;
    },
    
    // given a date, and boundary limits for either side of a month end date, what's the
    // month this date is in (if any)?
    getMonthNameInLimits: function(check_date, before_limit, after_limit) {
        var before_days = this.getDaysBeforeMonthEnd(check_date);
        var after_days = this.getDaysAfterMonthEnd(check_date);
        
        if ( before_limit + after_limit >= 30 ) {
            return null;
        }
        
        if ( before_days <= before_limit ) {
            return Ext.Date.format(check_date,'F');
        }
        
        if ( after_days <= after_limit ) {
            var last_month = Rally.util.DateTime.add(check_date,'month',-1);
            return Ext.Date.format(last_month,'F');
        }
        
        return null;
    },
    
    getMonthIsoInLimits: function(check_date, before_limit, after_limit) {
        var before_days = this.getDaysBeforeMonthEnd(check_date);
        var after_days = this.getDaysAfterMonthEnd(check_date);
        
        if ( before_limit + after_limit >= 30 ) {
            return null;
        }
        
        if ( before_days <= before_limit ) {
            return Ext.Date.format(check_date,'o-m-01');
        }
        
        if ( after_days <= after_limit ) {
            var last_month = Rally.util.DateTime.add(check_date,'month',-1);
            return Ext.Date.format(last_month,'o-m-01');
        }
        
        return null;
    }

});
Ext.define('TSModel',{
    extend: 'Ext.data.Model',

    fields: [
        { name: '_ref', type: 'string' },
        { name: '_refObjectName', type: 'string' },
        { name: 'Name', type: 'string' },
        { name: 'ObjectID', type: 'int' },
        { name: 'Description', type: 'string' },
        { name: 'FormattedID', type: 'string' },
        { name: '__percentage', type: 'float', defaultValue: 0 },
        { name: 'Project', type:'object' },
        { name: '__pref', type: 'object', convert: function(pref,record) {
            if ( Ext.isEmpty(pref) ) { return; }
            var value = Ext.JSON.decode(pref.get('Value'));
            record.set('__lastChangedBy',value.__lastChangedBy);
            record.set('__lastChangedOn', value.__lastChangedOn);
            record.set('__percentage', value.__percentage);
            return pref;
        }},
        { name: '__lastChangedBy', type: 'object' },
        { name: '__lastChangedOn', type: 'string' },
        { name: '__monthStart', type: 'string' },
        { name: '__dataProjectRef', type:'string' } // for the pref to be assigned to
    ],
    
    getKey: function() {
            var key = Ext.String.format("{0}.{1}.{2}",
                TSKeys.percentageKeyPrefix,
                this.get('__monthStart'),
                this.get('ObjectID')
            );
            return key;
    },

    save: function(v) {
        var changes = this.getChanges();

        if (! Ext.isObject(changes) ) {
            return;
        }
        
        var user = Rally.getApp().getContext().getUser();

        this.set('__lastChangedBy', {
            ObjectID: user.ObjectID,
            _ref: user._ref,
            _refObjectName: user._refObjectName,
            UserName: user.UserName
        });
        var timestamp = Rally.util.DateTime.toIsoString(new Date());
        this.set('__lastChangedOn', timestamp);
        
        return this._savePercentage();
    },
    
    _savePercentage: function() {
        var me = this;
        
        var json_value = Ext.JSON.encode({
            __lastChangedOn: this.get('__lastChangedOn'),
            __lastChangedBy: this.get('__lastChangedBy'),
            __percentage: this.get('__percentage')
        });
        
        var pref = this.get('__pref');
        if ( Ext.isEmpty(pref) ) {
            console.log("Creating value for new pref:", json_value);
            return this._createPreference(json_value);
        } else {
            console.log("Saving value for existing pref:", json_value);
            pref.set('Value',json_value);
            return pref.save();
        }
    },
    
    _createPreference: function(json_value) {
        var me = this,
            key = this.getKey(),
            project_ref = this.get('__dataProjectRef');
        
        var config = {
            Project: project_ref,
            Name: key,
            Value: json_value
        };
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            scope: this,
            success: function(model) {
                var pref = Ext.create(model,config);
                pref.save({
                    callback: function(result, operation) {
                        me.set('__pref', result[0]);
                    }
                });
            }
        });
    }
});
Ext.define("TSInitiativePercentageView", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box',layout: 'hbox', defaults: { margin: 10 }},
        {xtype:'container',itemId:'display_box', layout: 'fit'}
    ],

    integrationHeaders : {
        name : "TSInitiativePercentageReport"
    },
    
    config: {
        defaultSettings: {
            query: '(c_Capitalizable = true)'
        }
    },
    
    launch: function() {
        var me = this;
//        console.log('subadmin:', this.getContext().getPermissions().isSubscriptionAdmin());
//        console.log('wsadmin:',  this.getContext().getPermissions().isWorkspaceAdmin());
//        console.log('eitheradmin:',  this.getContext().getPermissions().isWorkspaceOrSubscriptionAdmin());
        // this._showAppMessage("You must be a workspace or subscription admin to use this app.");
        
        CA.agile.technicalservices.util.WsapiUtils.getPortfolioItemTypes().then({
            success: function(pis) {
                this.PortfolioItemTypes = pis;
                this._addSelectors();
            },
            scope: this
        });
    },
    
    _addSelectors: function() {
        var me = this,
            container = this.getSelectorBox();
//        var project_filter = [{property:'Children.ObjectID',value:''}];

        var month_data = [
            {name:'January',value: '01'},
            {name:'February',value: '02'},
            {name:'March',value: '03'},
            {name:'April',value: '04'},
            {name:'May',value: '05'},
            {name:'June',value: '06'},
            {name:'July',value: '07'},
            {name:'August',value: '08'},
            {name:'September',value: '09'},
            {name:'October',value: '10'},
            {name:'November',value: '11'},
            {name:'December',value: '12'}
        ];
        
        
        var year_data = [];
        var current_year = new Date();
        while ( current_year > new Date(2015,01,01) ) {
            year_data.push({name: Ext.Date.format(current_year,'o'), value: Ext.Date.format(current_year,'o') });
            current_year = Rally.util.DateTime.add(current_year,'year',-1);
        }
    
        container.add({
            xtype:'combo',
            store: Ext.create('Ext.data.Store',{
                fields: ['name','value'],
                data: year_data
            }),
            fieldLabel: 'Year',
            labelWidth: 45,
            displayField: 'name',
            valueField: 'value',
            typeAhead: true,
            queryMode: 'local'
        }).on(
            'change', 
            function(cb) {
                this.selectedYear = cb.getValue();
                this._updateData();
            }, 
            me
        );
        
        container.add({
            xtype:'combo',
            store: Ext.create('Ext.data.Store',{
                fields: ['name','value'],
                data: month_data
            }),
            fieldLabel: 'Month',
            labelWidth: 45,
            displayField: 'name',
            valueField: 'value',
            typeAhead: true,
            queryMode: 'local'
        }).on(
            'change', 
            function(cb) {
                this.selectedMonth = cb.getValue();
                this._updateData();
            }, 
            me
        );
        
//                container.add({
//                    xtype:'container',
//                    cls: 'month-name-display',
//                    html: this.monthNameForEntry
//                });
//        

    },
    
    _updateData: function() {
        this._clearDisplayBox();
       
        
        if ( Ext.isEmpty(this.selectedYear) || Ext.isEmpty(this.selectedMonth) ) {
            return;
        }
        this.monthIsoForEntry = this.selectedYear + "-" + this.selectedMonth + "-01";
        this.projectsForArtifactOid = {};
        
        this.logger.log('_updateData',this.monthIsoForEntry);

        Deft.Chain.pipeline([
            this._fetchActiveStoryHierarchies,
            this._fetchInitiativesFromHierarchies,
            this._fetchAlreadyEnteredData
        ],this).then({
            success: function(results) {
                var initiatives = results[0],
                    prefs_by_oid = results[1];
                
                this.logger.log("prefs by oid:", prefs_by_oid);
                this.logger.log("projects by oid:", this.projectsForArtifactOid);
                
                var initiative_data = Ext.Array.map(initiatives, function(initiative) {
                    return initiative.getData();
                });
                
                // need to have a row for each initiative for each project it is in
                var final_models = [];
                Ext.Array.each(initiative_data, function(initiative){
                    console.log('--', initiative.FormattedID);
                    initiative.__monthStart = this.monthIsoForEntry;
                    var oid = initiative.ObjectID;
                    
                    console.log('project for oid:', this.projectsForArtifactOid[oid]);
                    Ext.Array.each(this.projectsForArtifactOid[oid], function(project_name){
                        var clone = Ext.clone(initiative);
                        clone.Project = project_name;
                        Ext.Array.each(prefs_by_oid[oid], function(pref){
                            if ( pref.get('Project')._refObjectName == project_name ) {
                                clone.__pref = pref;
                            }
                        });
                        final_models.push(clone);
                    });
                    
                },this);
                
                this.displayGrid(final_models);
            },
            failure: function(msg) {
                
                if ( Ext.isString(msg) ) {
                    this.showErrorNotification( msg );
                    return;
                }
                if ( Ext.isObject(msg) && !Ext.isEmpty(msg.msg) ) {
                    this._showAppMessage(msg.msg);
                }
            },
            scope: this
        });
    },
    
    _fetchActiveStoryHierarchies: function(project_ref) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        var month_start = this.monthIsoForEntry;
        var next_month = Rally.util.DateTime.toIsoString(
            Rally.util.DateTime.add(
                Rally.util.DateTime.fromIsoString(month_start), 'month', 1
            )
        );
        //
        var active_states = ['Defined','In-Progress','Completed'];
        
        var config = {
            find: {
                _TypeHierarchy: { "$in": ['HierarchicalRequirement'] },
                "$or": [
                {
                    ScheduleState: { "$in":  active_states},
                    "_PreviousValues.ScheduleState": { "$exists": true },
                    "_ValidFrom": {
                        "$gte": month_start,
                        "$lt":  next_month
                    }
                },
                {
                    ScheduleState: { "$in": active_states },
                    __At: month_start
                },
                {
                    ScheduleState: { "$in": active_states },
                    __At: next_month
                }
                ]
            },
            fetch: ['ObjectID','_ItemHierarchy','Project'],
            hydrate: ['Project']
        };
        
        CA.agile.technicalservices.util.WsapiUtils.loadSnapshotRecords(config).then({
            success: function(snapshots) {
                if ( snapshots.length === 0 ) {
                    deferred.reject({msg: 'There were no active stories in the month.'});
                    return;
                }
                var hierarchies = {};
                
                Ext.Array.map(snapshots, function(snapshot){
                    hierarchies[snapshot.get('ObjectID')] = snapshot.get('_ItemHierarchy');
                    var project = snapshot.get('Project').Name
                    
                    Ext.Array.each(snapshot.get('_ItemHierarchy'), function(oid) {
                        if ( Ext.isEmpty(me.projectsForArtifactOid[oid])) {
                            me.projectsForArtifactOid[oid] = [];
                        }
                        me.projectsForArtifactOid[oid] = Ext.Array.merge(me.projectsForArtifactOid[oid],[project]);
                    });
                });
                
                deferred.resolve( Ext.Object.getValues(hierarchies) );
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _fetchInitiativesFromHierarchies: function(hierarchies) {
        this.logger.log('_fetchInitiativesFromHierarchies',hierarchies);

        if ( hierarchies.length === 0 ) { return []; }
        
        var oids = [];
        Ext.Array.each(hierarchies, function(hierarchy){
            hierarchy.pop();
            oids = Ext.Array.push(oids,hierarchy);
        });
        
        oids = Ext.Array.unique(oids);
        var filters = Rally.data.wsapi.Filter.or(
            Ext.Array.map(oids, function(oid){
                return { property:'ObjectID',value:oid }
            })
        );
        
        if ( Ext.isEmpty(filters) ) { return []; }
        
        var base_filter = this.getBaseInitiativeFilter();
        if ( !Ext.isEmpty(base_filter) ) {
            filters = filters.and(base_filter);
        }
        
        var config = {
            model: this.PortfolioItemTypes[1].get('TypePath'),
            filters: filters,
            fetch: ['FormattedID','Name','Notes','Description','Project'],
            enablePostGet: true,
            context: { project: null }
        };
        return CA.agile.technicalservices.util.WsapiUtils.loadWsapiRecords(config);
    },
    
    _fetchAlreadyEnteredData: function(initiatives) {
        var deferred = Ext.create('Deft.Deferred'),
            key_prefix = TSKeys.percentageKeyPrefix,
            month_start = this.monthIsoForEntry;
        
        var config = {
            model: 'Preference',
            fetch: ['Name','Value','Project'],
            filters: [
                {property:'Name',operator:'contains',value: key_prefix + "." + month_start}
            ],
            context: { project: null }
        };
        
        CA.agile.technicalservices.util.WsapiUtils.loadWsapiRecords(config).then({
            success: function(prefs) {
                var prefs_by_oid = {};
                Ext.Array.each(prefs, function(pref){
                    var pref_name = pref.get('Name');
                    var pref_array = pref_name.split('.');
                    if ( pref_array.length != 5 ) { return; }
                    if (Ext.isEmpty(prefs_by_oid[pref_array[4]])) {
                        prefs_by_oid[pref_array[4]] = [];
                    }
                    
                    prefs_by_oid[pref_array[4]].push(pref);
                });
                deferred.resolve([initiatives,prefs_by_oid]);
            },
            failure: function(msg) {
                deferred.reject(msg)
            }
        });
        
        return deferred.promise;
    },
    
    displayGrid: function(initiatives) {
        this.logger.log('displayGrid', initiatives);
        
        var store = Ext.create('Rally.data.custom.Store',{
            model:'TSModel',
            data: initiatives,
            groupField: 'Project'
        });
        
        this._clearDisplayBox();
        
        var display_box = this.getDisplayBox();
        
        display_box.add({
            xtype:'rallygrid',
            columnCfgs: this._getColumns(),
            store: store,
            showRowActionsColumn : false,
            disableSelection: true,
            enableColumnMove: false,
            enableColumnResize : false,
            features: [{
                ftype: 'grouping',
                startCollapsed: true,
                groupHeaderTpl: 'Team: {name}'
            }]
        });
    },
    
    _getColumns: function() {
        return [
            { 
                text: 'ID',       
                xtype: 'templatecolumn', 
                tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate',{
                    showIcon: false,
                    showHover: true
                })
            },
            { dataIndex:'Name',text:'Name', flex: 1},
            { 
                dataIndex:'__percentage', 
                text: 'Percentage', 
                width: 100,
                align: 'center',
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    return v + "%";
                }
            },
            {
                dataIndex: '__lastChangedBy',
                text: 'Last Changed By',
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    if ( !Ext.isObject(v) ) { return v; }
                    return v._refObjectName;
                }
            },
            {
                dataIndex: '__lastChangedOn',
                text: 'Last Changed On',
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    return v;
                }
            }
        ];
    },
    
    getSelectorBox: function() {
        return this.down('#selector_box');
    },
    
    getDisplayBox: function() {
        return this.down('#display_box');
    },
    
    getLowestLevelPITypePath: function() {
        return this.PortfolioItemTypes[0].get('TypePath');
    },
    
    _showAppMessage: function(msg){
        var display_box = this.getDisplayBox();
        display_box.removeAll();
        
        var ct = display_box.add({
            xtype: 'container',
            tpl: '<div class="no-data-container"><div class="secondary-message">{message}</div></div>'
        });
        ct.update({message: msg});
    },
    
    _clearDisplayBox: function() {
        var display_box = this.getDisplayBox();
        display_box.removeAll();
    },
    
    getBaseInitiativeFilter: function() {
        if (this.getSetting('query')){
            return Rally.data.wsapi.Filter.fromQueryString(this.getSetting('query'));
        }
        return null;
    },
    
    getSettingsFields: function() {
        return [
            {
                xtype: 'textarea',
                fieldLabel: 'Query',
                labelAlign: 'right',
//                labelWidth: labelWidth,
                name: 'query',
                anchor: '100%',
                cls: 'query-field',
                margin: '25 70 0 0',
                plugins: [
                    {
                        ptype: 'rallyhelpfield',
                        helpId: 194
                    },
                    'rallyfieldvalidationui'
                ],
                validateOnBlur: false,
                validateOnChange: false,
                validator: function(value) {
                    try {
                        if (value) {
                            Rally.data.wsapi.Filter.fromQueryString(value);
                        }
                        return true;
                    } catch (e) {
                        return e.message;
                    }
                }
            }
        ];
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('TSInitiativePercentageView', {
                   name: 'TS Initiative Percentage View'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>