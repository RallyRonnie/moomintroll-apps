<!DOCTYPE html>
<html>
<head>
    <title>Questionaire</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Mar 09 2017 18:09:56 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Mar 09 2017 18:09:56 GMT-0800 (PST)";
        var STORY    = "F166";
        var BUILDER  = "marjo60";
        var CHECKSUM = 107382168820;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.agile.technicalservices.control.PanelPicker',{
    extend: 'Ext.container.Container',
    alias: 'widget.panelpicker',

    layout: 'hbox',
    allowEndOfSurvey: true,

    padding: 0,

    config: {
        valueField: 'value',
        displayField: 'name'
    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function(){

       var data  = [{
            name: '-- Submit Form --',
            value: null
        }];

        var pastCurrentSection = false;
        Ext.Array.each(this.keys, function(key){
            if (key == this.currentSection){
                pastCurrentSection = true;
                return true;
            }
            if (pastCurrentSection){
                data.push({
                    name: Ext.String.format('Section [{0}]', key),
                    value: key
                });
            }

        }, this);

        var panelStore = Ext.create('Rally.data.wsapi.Store',{
            data: data,
            fields: ['name', 'value']
        }, this);

        var config = Ext.apply(this.config, {
            xtype: 'rallycombobox',
            store: panelStore
        });

        this.items = [config];
        this.callParent(arguments);

    },
    getValue: function(){
        return this.down('rallycombobox').getValue();
        //return this.down('#' + this.itemId).getValue();
    }
});
Ext.define('CA.agile.technicalservices.Survey',{
    constructor: function(config){
        Ext.apply(this, config);
        this.questionPath = [];
        this.panelPath = [];
        console.log('CA.agile.technicalservices.Survey', this);
    },
    getTitle: function(){
        return this.title;
    },
    getInstructions: function(){
        return this.instructions;
    },
    setRecord: function(record){
        this.record = record;
    },
    getID: function(){
        console.log('getID', this.record.get('FormattedID'));
        return this.record && this.record.get('FormattedID') || "Unknown";
    },
    //getRootKey: function(){
    //    return Ext.Object.getKeys(this.questionMap)[0];
    //},
    //getInitialContainerConfig: function(){
    //    var containerKey = this.startContainer;
    //    this.questionPath = [containerKey];
    //    return this.getQuestionConfig(containerKey);
    //},
    //getNextContainerConfig: function(currentContainerKey,selectedChildKey, containerValue){
    //    //get the next container in the tree.
    //    this.questionPath.push(selectedChildKey);
    //    this.questions[selectedChildKey].value = containerValue;
    //    return this.getQuestionConfig(selectedChildKey);
    //},
    //getPreviousContainerConfig: function(currentContainerKey,selectedChildKey, containerValue){
    //    if (containerValue){
    //        this.questions[selectedChildKey].value = containerValue;
    //    }
    //    //now remove the last element from the path
    //    this.questionPath.pop();
    //    return this.getQuestionConfig(this.questionPath[this.questionPath.length-1]);
    //},
    //getQuestionMap: function(questionKey){
    //    var map = this.questionMap;
    //    Ext.Array.each(this.questionPath, function(key){
    //        map = map[key] || null;
    //        if (!map){ return false; }
    //        if (questionKey === key){
    //            return false;
    //        }
    //    });
    //    return map;
    //},
    //getQuestionConfig: function(key){
    //    var question = this.questions[key],
    //        hasChildren = false;
    //    if (!question){
    //        return null;
    //    }
    //
    //    var childrenKeys = question.children || [],
    //        children = [];
    //    Ext.Array.map(childrenKeys, function(c){
    //        var child = this.questions[c];
    //        if (child){
    //            child.key = c;
    //            hasChildren = (child.children && child.children.length > 0);
    //            child.value = (question.value === child.key);
    //            children.push(child);
    //        }
    //    }, this);
    //
    //    return {
    //        xtype: question.childType,
    //        instructions: question.childInstructions,
    //        questions: children,
    //        record: this.record,
    //        key: key,
    //        hasChildren: hasChildren
    //    };
    //},
    submit: function(containerValue, preview){
        var deferred = Ext.create('Deft.Deferred');
       // this.panelPath.push(selectedChildKey);
        this.setValue(containerValue);
       // this.questionPath.push(selectedChildKey);
       // this.questions[selectedChildKey].value = containerValue;
        console.log('submit', this.panelPath, containerValue);
        var updates = {};
        Ext.Array.each(this.panelPath, function(key){
            var panel = this.panels[key];
            if (panel.field && panel.value){
                updates[panel.field] = panel.value;
            }
            if (panel.options && panel.value >= 0){
                if (panel.options.length > panel.value && panel.options[panel.value].field){
                    updates[ panel.options[panel.value].field] =  panel.options[panel.value].value;
                }
            }
        }, this);

        this.clearValues();
        
        console.log('updates', updates);
        if (!preview){
            Ext.Object.each(updates, function(field,value){
                this.record.set(field, value);
            }, this);

            this.record.save().then({
                success: function(record){
                    deferred.resolve(record);
                },
                failure: function(){
                    deferred.reject('Failed to save changes');
                },
                scope: this
            });
        } else {
            var previewMsg = 'The following updates would be made:  <br/>';
            Ext.Object.each(updates, function(field,value){
                previewMsg += Ext.String.format('{0}: {1} => {2}<br/>', field,this.record.get(field),value);
            }, this);
            deferred.resolve(previewMsg);
        }

        return deferred;
    },
    
    // clear after submitting so it doesn't default for the next one
    clearValues: function() {
    	console.log('clearValues');
    	Ext.Array.each(this.panelPath, function(key){
            var panel = this.panels[key];
            
            if (panel.options && panel.value >= 0 && panel.options[panel.value]){
                if (panel.options.length > panel.value && panel.options[panel.value].field){
                    panel.options[panel.value].value = null;
                }
            }
            panel.value = null;
        }, this);
    	console.log(this.panels);
    },
    //isFirstButton: function(){
    //    return (this.questionPath.length === 1);
    //},
    isFirst: function(){
        return (this.panelPath.length === 1);
    },
    isLast: function(selectedValue){
        console.log('isLast', selectedValue);
        var key = this.getCurrentPanelKey();

        var panelCfg = this.panels[key],
            isLast = true;

        if (panelCfg){
            if (panelCfg.nextSection){
                return false;
            }

            if (selectedValue === null){ return true; }

            if(selectedValue >= 0 && panelCfg.options && panelCfg.options.length > selectedValue){
                if (panelCfg.options[selectedValue].nextSection){
                    isLast = false;
                }
            }
        }
        return isLast;
    },
    setValue: function(containerValue){
        var containerKey = this.getCurrentPanelKey();
        console.log('setValue', containerKey,containerValue);
        this.panels[containerKey].value = containerValue;

        console.log('setValue', this.panels);
    },

    getPanelCfg: function(key){
        if (!key){
            key = 'root';
            this.panelPath = [];
        }
        if (!Ext.Array.contains(this.panelPath, key)){
            this.panelPath.push(key);
        }
        return this.panels[key];
    },
    getCurrentPanelKey: function(){
        return this.panelPath[this.panelPath.length-1];
    },
    getPreviousPanelCfg: function(){
        this.panelPath.pop();
        var key = this.getCurrentPanelKey();
        return this.getPanelCfg(key);
    }
});
Ext.define('CA.agile.technicalservices.Toolbox',{
    singleton: true,

    isUserWorkspaceAdmin: function(context){

        var isAdmin = false,
            permissions = context.getPermissions().userPermissions,
            currentWorkspace = context.getWorkspace().ObjectID;

        Ext.Array.each(permissions, function(permission) {
            if (permission.Role === "Subscription Admin") {
                isAdmin = true;
                return false;
            }
            var permissionOid = Rally.util.Ref.getOidFromRef(permission._ref);
            if (permission.Role === "Workspace Admin" && permissionOid === currentWorkspace) {
                isAdmin = true;
                return false;
            }
        });
        return isAdmin;
    }
});
Ext.define('CA.agile.technicalservices.survey.Settings',{
    singleton: true,

});
Ext.override(Ext.form.field.Base,{
    onDirtyChange: function(isDirty) {
        // make empty so that removing radio buttons before the class is updated doesn't throw an error
    }
});

Ext.define('CA.agile.technicalservices.survey.ConfigurationView',{
    extend: 'Ext.panel.Panel',
    alias: 'widget.surveyconfigurationview',
    logger: new Rally.technicalservices.Logger(),
    MAX_TITLE_LEN: 100,

    sectionTypeSuffix: '-type-',
    sectionTextSuffix: '-text-',
    sectionNextSectionSuffix: '-next-section-',
    deleteSectionSuffix: '-delete-section',
    sectionFieldSuffix: '-field-',
    sectionExampleValueSuffix: '-example-value',
    sectionUpdateContainerSuffix: '-update-container-' ,
    sectionFieldValueSuffix: '-field-value-',

    layout: 'accordion',
    flex: 1,
    width: 400,
    /**
     *  Configurations:
     *  surveyType: artifact type of the survey
     *  surveyPanels: array of panels
     **/

    initComponent: function(){
        this.items = this._getSections();

        this.callParent(arguments);
    },
    _getSections: function(){
        var sections = [],
            idx = 0;

        ////save the current section
        //Ext.Array.each(this.items, function(item){
        //    console.log('item', item);
        //    if (item.collapsed !== false){
        //        var sectionId = item.itemId;
        //        this.applySurveySettings(sectionId);
        //    }
        //}, this);

        Ext.Object.each(this.surveyPanelCfg.getPanels(), function(sectionID, section){
            sections.push(this._getSection(section, idx++));
        }, this);

        sections.push(this._getAddNewSection());

        return sections;
    },
    _getSectionKeys: function(){
        return Ext.Object.getKeys(this.surveyPanelCfg.getPanels());
    },
    _getAddNewSection: function(){
        var me = this;
        
        return {
            title: '<div class="add-new-section">Add a New Section...</div>',
            layout: 'hbox',
            items: [{
                xtype: 'rallytextfield',
                fieldLabel: 'Section Id',
                labelAlign: 'top',
                labelCls: 'rally-upper-bold',
                itemId: 'new-section-id',
                emptyText: 'Please enter a unique section id (25 characters or less)...',
                maxLength: 25,
                width: 300,
                margin: 10,
                height: 35,
                validator: function(value) { return me._validateSectionId(value,me); },
                listeners: {
                    scope: this,
                    change: this._enableSectionButton
                }
            },{
                xtype:'rallybutton',
                itemId: 'addSectionButton',
                text: 'Add Section',
                margin: '25 10 10 10',
                disabled: true,
                handler: this.addSection,
                scope: this
            }],
            collapsed: true
        };
    },
    _getSection: function(sectionConfig, idx){
        var title = Ext.String.ellipsis(Ext.String.format('Section [{0}] <div class="title-question">{1}</div>',sectionConfig.id , sectionConfig.text), this.MAX_TITLE_LEN),
            type = sectionConfig.type;
        
        return {
            title: title,
            flex: 1,
            items: this._getSectionItems(sectionConfig, idx),
            titleCollapse: false,
            itemId: sectionConfig.id,
            collapsed: sectionConfig.id !== 'root',
            listeners: {
                beforecollapse: function(p){
                  //  console.log('collapse', p.itemId,this.surveyPanelCfg.getPanel(p.itemId).options,this.getSectionOptions(p.itemId));
                    this.applySurveySettings(p.itemId);
                },
                scope: this
            }
        };
    },
    _getSectionItems: function(sectionConfig, idx){

        var type = sectionConfig.type;

        var sectionItems = [{
            xtype: 'textareafield',
            value: sectionConfig.text,
            itemId: this.getSectionTextItemId(sectionConfig.id),
            fieldLabel: 'Question',
            labelAlign: 'top',
            labelCls: 'rally-upper-bold',
            labelSeparator: '',
            grow: true,
            emptyText: 'Please type a question...',
            width: '90%',
            margin: 10,
            listeners: {
                blur: function(txt){
                    sectionConfig.text = txt.getValue();
                }
            }
        },{
            xtype: 'radiogroup',
            itemId: this.getSectionTypeItemId(sectionConfig.id),
            fieldLabel: 'Question Type',
            labelAlign: 'top',
            labelCls: 'rally-upper-bold',
            labelSeparator: '',
            columns: 4,
            width: '90%',
            margin: 10,

            items: [
                { boxLabel: 'Multiple Choice', name: sectionConfig.id + '-questionType', inputValue: 'choice', checked: type == 'choice' },
                { boxLabel: 'Text Entry Field', name: sectionConfig.id + '-questionType', inputValue: 'text', checked: type == 'text'}
            ],
            listeners: {
                scope: this,
                change: this.changeType
            }
        }];

        if (type == 'text'){
            sectionItems = sectionItems.concat(this._getTextTypeItems(sectionConfig));
        }

        if (type == 'choice'){
            sectionItems = sectionItems.concat(this._getChoiceTypeItems(sectionConfig));
        }

        if (sectionConfig.id !== 'root'){
            sectionItems.push({
                xtype: 'container',
                layout: 'hbox',
                items: [{
                    xtype: 'container',
                    flex: 1
                },{
                    xtype: 'rallybutton',
                    text: 'Delete Section',
                    iconCls: 'icon-warning',
                    cls: 'danger-button',
                    itemId: sectionConfig.id + this.deleteSectionSuffix,
                    handler: this.deleteSection,
                    scope: this
                }]
            });
        }

        return sectionItems;
    },
    _getTextTypeItems: function(sectionConfig){

        var model = this.surveyPanelCfg.model,
            field = sectionConfig.field;

        var nextSection = null,
            sectionKeys = this._getSectionKeys();
        if (sectionConfig.nextSection && Ext.Array.contains(sectionKeys, sectionConfig.nextSection)){
            nextSection = sectionConfig.nextSection;
        }

        return [{
            xtype: 'rallyfieldcombobox',
            fieldLabel: 'Text Entry Field Name',
            labelAlign: 'top',
            labelCls: 'rally-upper-bold',
            itemId: this.getSectionFieldItemId(sectionConfig.id),
            width: 300,
            margin: 10,
            model: model,
            value: field,
            allowNoEntry: true,
            _isNotHidden: this.shouldShowTextField

        },{
            xtype: 'textareafield',
            value: sectionConfig.exampleValue || '',
            fieldLabel: 'Example Value',
            labelAlign: 'top',
            labelCls: 'rally-upper-bold',
            emptyText: 'Type question text...',
            itemId: this.getSectionExampleValueItemId(sectionConfig.id),
            labelSeparator: '',
            grow: true,
            width: '90%',
            margin: 10
        },{
            xtype: 'panelpicker',
            itemId: this.getSectionNextSectionItemId(sectionConfig.id),
            fieldLabel: 'Next Section',
            labelCls: 'rally-upper-bold',
            labelAlign: 'top',
            value: nextSection,
            keys: sectionKeys,
            margin: 5,
            currentSection: sectionConfig.id
        }];
    },
    _getChoiceTypeItems: function(sectionConfig, sectionIndex){
        var choiceItems = [{
                xtype: 'container',
                layout:'column',
                width: '100%',
                padding: 5,
                items:[{
                    xtype: 'container',
                    columnWidth:.05,
                    html: '&nbsp;'
                },{
                    xtype:'container',
                    html: '<div class="rally-upper-bold">Choice Option Text</div>',
                    columnWidth:.5
                },{
                    xtype: 'container',
                    columnWidth:.225,
                    html: '<div class="rally-upper-bold" style="text-align:center;">Next Section</div>'
                },{
                    xtype: 'container',
                    columnWidth:.225,
                    html: '<div class="rally-upper-bold" style="text-align:center;">Update Action</div>'
                }]
            }];

        var idx = 0,
            sectionKeys = this._getSectionKeys();


        var model = this.surveyPanelCfg.model;


        Ext.Array.each(sectionConfig.options || [], function(option){

            var nextSection = null;
            if (option.nextSection && Ext.Array.contains(sectionKeys, option.nextSection)){
                nextSection = option.nextSection;
            }

            choiceItems.push({
                xtype: 'container',
                layout:'column',
                width: '100%',
                padding: 5,
                items:[{
                    xtype: 'rallybutton',
                    iconCls: 'icon-delete',
                    cls: 'button-no-border',
                    itemId: sectionConfig.id + '-delete-' + idx,
                    columnWidth:.05,
                    handler: this.deleteOption,
                    scope: this
                },{
                    xtype:'textareafield',
                    grow: true,
                    fieldLabel: '',
                    emptyText: 'Type choice text...',
                    itemId: this.getSectionTextItemId(sectionConfig.id, idx),
                    columnWidth:.5,
                    value: option.text
                },{
                    xtype: 'panelpicker',
                    itemId: this.getSectionNextSectionItemId(sectionConfig.id,idx),
                    fieldLabel: '',
                    margin: '0 10 5 10',
                    value: nextSection,
                    keys: sectionKeys,
                    currentSection: sectionConfig.id,
                    columnWidth:.2
                },{

                    xtype: 'container',
                    itemId: this.getSectionUpdateContainerItemId(sectionConfig.id, idx),
                    columnWidth:.25,
                    items: [{
                        xtype: 'rallyfieldcombobox',
                        fieldLabel: 'Field',
                        labelAlign: 'right',
                        labelWidth: 75,
                        itemId: this.getSectionFieldItemId(sectionConfig.id, idx++),
                        model: model,
                        value: option.field || null,
                        allowNoEntry: true,
                        noEntryText: '-- None --',
                        _isNotHidden: this.shouldShowUpdateField,
                        listeners: {
                            select: this.updateFieldValueOptions,
                            scope: this,
                            ready: this.updateFieldValueOptions
                        }
                    }]
                }]
            });

        }, this);

        choiceItems.push({
            xtype:'rallybutton',
            iconCls: 'icon-add',
            itemId: sectionConfig.id + '-addOption',
            text: 'Add Choice',
            cls: 'button-no-border',
            margin: 5,
            handler: this.addOption,
            scope: this
        });

        return  choiceItems;
    },
    addOption: function(btn){
        var optionInfo = btn.itemId.replace('-addOption', '');
        if (optionInfo){
            var section = this.surveyPanelCfg.getPanel(optionInfo);

            section.options.push({
                text: '',
                nextSection: null
            });

            this.refreshSection(optionInfo);
        }
    },
    deleteOption: function(btn){
        var optionInfo = btn.itemId.split('-delete-');
        if (optionInfo && optionInfo.length == 2){
            var section = this.surveyPanelCfg.getPanel(optionInfo[0]);
            section.options.splice(optionInfo[1],1);
            this.refreshSection(optionInfo[0]);
        }
    },
    refreshSection: function(sectionId){
        console.log('refreshSection', sectionId);
        var sectionCmp = this.down('#' + sectionId);
        if (sectionCmp){
            this.applySurveySettings(sectionId);

            sectionCmp.removeAll();
            sectionCmp.add(this._getSectionItems(this.surveyPanelCfg.getPanel(sectionId)));
            sectionCmp.doLayout();
        }
    },
    applySurveySettings: function(sectionId, section){
        console.log('applySurveySettings', sectionId);
        
        if (!section){
            section = this.surveyPanelCfg.getPanel(sectionId);
        }

        //section.type = this.getSectionType(sectionId);
        //section.text = this.getSectionText(sectionId);

        console.trace('section.type', section.type);
        if (section.type === 'choice'){
            section.options = this.getSectionOptions(sectionId);
        } else {
            section.field = this.getSectionField(sectionId);
            section.exampleValue = this.down(this.getSectionExampleValueItemId(sectionId, true)) &&
                this.down(this.getSectionExampleValueItemId(sectionId, true)).getValue();
            section.nextSection = this.down(this.getSectionNextSectionItemId(sectionId, -1, true)) &&
                this.down(this.getSectionNextSectionItemId(sectionId, -1, true)).getValue();
        }
    },
    refreshSurvey: function(){
        this.removeAll();
        this.add(this._getSections());
        this.doLayout();
    },
    deleteSection: function(btn){
        var sectionId = btn.itemId.replace(this.deleteSectionSuffix,'');
        if (sectionId){
            this.surveyPanelCfg.removePanel(sectionId);
        }
        this.refreshSurvey();
    },
    addSection: function(){
        var sectionId = this.down('#new-section-id') && this.down('#new-section-id').getValue();
        if (!sectionId){
            Rally.ui.notify.Notifier.showError({message: 'Section ID cannot be blank.'});
            return;
        }

        if (Ext.Array.contains(this._getSectionKeys(), sectionId)){
            Rally.ui.notify.Notifier.showError({message: 'Section ID must be unique.  Please enter a unique section ID.'});
            return;
        }

        this.surveyPanelCfg.setPanel(sectionId, {
            type: 'choice',
            text: '',
            id: sectionId,
            itemId: sectionId,
            options: []
        });
        this.refreshSurvey();
    },
    
    _validateSectionId: function(value,me) {
        if ( /\s/.test(value) ) {
            return "Section ID cannot contain spaces.";
        }
        
        if ( /\W/.test(value) ) {
            return "Section ID must contain only letters, numbers and/or underscores";
        }
        
        if (Ext.Array.contains(me._getSectionKeys(), value)){
            return 'Section ID must be unique.';
        }
        
        if ( Ext.isEmpty(value) ) {
            return "Section ID cannot be blank.";
        }
        return true;
    },
    
    _enableSectionButton: function(field) {
        var button = this.down('#addSectionButton');
        
        if ( Ext.isEmpty(button) ) { return ; }
        
        if ( field.isValid() ) {
            button.setDisabled(false);
            return;
        }
        button.setDisabled(true);
    },
    
    changeType: function(group, newValue){
        var sectionId = group.itemId.replace(this.sectionTypeSuffix,'');
        
        group.suspendEvents();
        
        var name = sectionId + '-questionType';
        if (newValue && newValue[name]){
            this.surveyPanelCfg.getPanel(sectionId).type = newValue[name];
            console.log('changeType',sectionId, newValue[name]);
            this.refreshSection(sectionId);
        }
    },
    
    _getEditorFromFieldDef: function(fieldDef){
        
        if ( fieldDef.editor  && fieldDef.editor.xtype != "rallyrecordcontexteditor" ) { return fieldDef.editor; }
        
        var editor = { xtype:'rallytextfield' };
        
        if ( fieldDef.attributeDefinition.Constrained && fieldDef.custom ) {
            editor = {
                xtype: 'rallyfieldvaluecombobox',
                model: 'PortfolioItem',
                field: fieldDef.name
            };
        }
        
        return editor;
    },
    
    updateFieldValueOptions: function(cb){
        var info = cb.itemId.split(this.sectionFieldSuffix);
        var sectionId = info[0],
            idx = info[1],
            valueItemId = this.getSectionFieldValueItemId(sectionId, idx),
            containerId = this.getSectionUpdateContainerItemId(sectionId, idx);

        var value = this.surveyPanelCfg.getPanel(sectionId).options &&
            this.surveyPanelCfg.getPanel(sectionId).options[idx] &&
            this.surveyPanelCfg.getPanel(sectionId).options[idx].value || null

        var fieldDef = cb && cb.getRecord() && cb.getRecord().get('fieldDefinition');
        console.log('updateFieldValueOptions', fieldDef, value, containerId);
        var cfg = null;
        if (fieldDef && fieldDef.attributeDefinition){
            cfg = this._getEditorFromFieldDef(fieldDef);
            cfg.itemId = valueItemId;
            cfg.fieldLabel = 'Set to Value';
            cfg.labelAlign = 'right';
            cfg.labelWidth = 75;
            cfg.width = cb.getWidth();
            cfg.value = value;
        }

        var ct = this.down('#' + containerId);
        if (ct.down('#' + valueItemId)){
            ct.down('#' + valueItemId).destroy();
        }
        if (cfg){
            ct.add(cfg);
        }
    },
    shouldShowUpdateField: function(field){
        if (field.readOnly){ return false; }

        if (field && field.attributeDefinition){
            if (field.attributeDefinition.AttributeType === 'STRING' || field.attributeDefinition.AttributeType === 'TEXT'){
                return true;
            }
        }
        return false;
    },
    shouldShowTextField: function(field){

        if (field.readOnly){ return false; }

        if (field && field.attributeDefinition){
            if (field.attributeDefinition.AttributeType === 'STRING' || field.attributeDefinition.AttributeType === 'TEXT'){
                if (field.attributeDefinition.Constrained || field.constrained || field.editor.xtype === 'rallycombobox'){
                    return false;
                }
                return true;
            }
        }
        return false;
    },
    getSurveyConfig: function(){
        var surveyConfig = this.surveyPanelCfg;

        Ext.Object.each(this.surveyPanelCfg.getPanels(), function(sectionId, section){
            section.text = this.getSectionText(sectionId);
            section.type = this.getSectionType(sectionId);
            console.log('section', section.id, section.type);
            if (section.type === 'choice'){
                section.options = this.getSectionOptions(sectionId);
            } else {
                section.options = [];
                section.field = this.getSectionField(sectionId);
                section.exampleValue = this.down(this.getSectionExampleValueItemId(sectionId, true)) &&
                    this.down(this.getSectionExampleValueItemId(sectionId, true)).getValue();
                section.nextSection = this.down(this.getSectionNextSectionItemId(sectionId, -1, true)) &&
                    this.down(this.getSectionNextSectionItemId(sectionId, -1, true)).getValue();
            }
        }, this);

        return surveyConfig;
    },
    getSectionText: function(sectionId, idx){
        return this.down(this.getSectionTextItemId(sectionId, idx, true)) &&
                this.down(this.getSectionTextItemId(sectionId, idx, true)).getValue() || null;
    },
    getSectionTextItemId: function(sectionId, idx, includeHash){
        return this.getItemId(sectionId,this.sectionTextSuffix,idx,includeHash);
    },
    getSectionType: function(sectionId){
        return this.down(this.getSectionTypeItemId(sectionId, true)).getValue() &&
            this.down(this.getSectionTypeItemId(sectionId, true)).getValue()[sectionId + '-questionType'];
    },
    getSectionField: function(sectionId, idx){

        return this.down(this.getSectionFieldItemId(sectionId, idx, true)) &&
            this.down(this.getSectionFieldItemId(sectionId, idx, true)).getValue() || null;
    },
    getSectionFieldValue: function(sectionId, idx){
        return this.down(this.getSectionFieldValueItemId(sectionId, idx, true)) &&
            this.down(this.getSectionFieldValueItemId(sectionId, idx, true)).getValue() || null;
    },
    getSectionTypeItemId: function(sectionId, includeHash){
        return this.getItemId(sectionId,this.sectionTypeSuffix,-1,includeHash);
    },
    getSectionFieldItemId: function(sectionId, idx, includeHash){
        return this.getItemId(sectionId,this.sectionFieldSuffix,idx,includeHash);
    },
    getSectionFieldValueItemId: function(sectionId, idx, includeHash){
        return this.getItemId(sectionId,this.sectionFieldValueSuffix,idx,includeHash);
    },
    getSectionExampleValueItemId: function(sectionId,includeHash){
        return this.getItemId(sectionId, this.sectionExampleValueSuffix,-1,includeHash);
    },
    getSectionNextSectionItemId: function(sectionId, idx, includeHash){
        return this.getItemId(sectionId,this.sectionNextSectionSuffix,idx,includeHash);
    },
    getSectionUpdateContainerItemId: function(sectionId, idx, includeHash){
        return this.getItemId(sectionId, this.sectionUpdateContainerSuffix, idx, includeHash);
    },
    getItemId: function(sectionId, suffix, idx, includeHash){
        var itemId = sectionId + suffix;
        if (idx >= 0){
            itemId += idx;
        }

        if (includeHash){
            itemId = '#' + itemId;
        }
        return itemId;
    },
    getSectionOptions: function(sectionId){
        var options = this.surveyPanelCfg.getPanel(sectionId).options || [];

        for (var i=0; i< options.length; i++){
            options[i].text = this.getSectionText(sectionId, i);
            options[i].nextSection = this.down(this.getSectionNextSectionItemId(sectionId, i, true)) &&
                this.down(this.getSectionNextSectionItemId(sectionId, i, true)).getValue() || null;
            options[i].field = this.getSectionField(sectionId, i);
            options[i].value = this.getSectionFieldValue(sectionId, i);
        }
        return options;
    }

});
Ext.define('CA.agile.technicalservices.SurveyConfiguration',{
    mixins: {
        observable: 'Ext.util.Observable'
    },
    /**
     * Types of panels
     */
    TYPE_CHOICE: 'choice',
    TYPE_TEXT_ENTRY: 'text',

    model: 'PortfolioItem/Initiative',
    fetch: ['FormattedID','Name'],

    title: 'Financial Survey',

    startContainer: 'root',

    filters: null,
    
    constructor: function (config) {

        this.mixins.observable.constructor.call(this, config);

        this.surveyTitle = config.surveyTitle;
        this.surveyType = config.surveyType;

        Rally.data.PreferenceManager.load({
            appID: this.getAppId(),
            success: function(prefs) {
                if (prefs.panels){
                    this.panels = Ext.JSON.decode(prefs.panels);
                } else {
                    this.panels = {};
                }
                this.fireEvent('ready', this);
            },
            scope: this
        });
    },

    getAppId: function(){
        return Rally.getApp().getAppId();
    },
    saveConfiguration: function(){
        //clear out values
        Ext.Object.each(this.panels, function(panel){
            panel.value = '';
        });

        var panelSetting = Ext.JSON.encode(this.panels);
        Rally.data.PreferenceManager.update({
            appID: this.getAppId(),
            settings: {
                panels: panelSetting
            },
            scope: this,
            success: function(prefs) {
                this.fireEvent('surveysaved', "Survey Settings saved successfully.");
            }
        });
    },
    getPanels: function(){
        if (!this.panels || Ext.Object.isEmpty(this.panels) || !this.panels.root){
            this.panels = {
                root: {
                    id: 'root',
                    text: '',
                    type: this.TYPE_CHOICE,
                    options: []
                }
            };
        }
        return this.panels;
    },
    getPanel: function(panelId){
        return this.panels[panelId];
    },
    setPanel: function(panelId, panelCfg){
        this.panels[panelId] = panelCfg;
    },
    removePanel: function(panelId){
        var panel = this.getPanel(panelId);
        if ( !panel ) {
            console.log('Cannot find panel with id:', panelId);
            return;
        }
        
        delete this.panels[panelId];
        return;
    },
    
    /**
     * panels:
     *     hash of objects representing a panel in the survey
     *
     *     key: unique panel identifier
     *     type:  type of panel (choice or text entry)  see above for options
     *     text: the text of the question at the top of the panel
     *
     *     choices:  null for anything other than choice type
     *     ** choice object **
     *     {
     *          text: answer text
     *          actions:  []  array of actions to be taken when this choice is selected see below for details
     *     }
     *
     *     textEntryFieldType:  type of field for text entry, null for choices
     *     actions:  []  array of actions to be taken when next is clicked;  If this is a choice, then the actions shoudl be in the choice.  If they are not, this field will override any choice
     *
     *     ** action object **
     *     {
     *          type: update or next panel,
     *          field: (for update, null for next panel)
     *          value: for next panel, the name of the next panel.  Null for the end of the survey,
     *                  for update, the value to update the field with.  If {value}, then it will take the value of the control
     *
     *     }
     *
     *
     */


    panels: {
        root: {
            id: 'root',
            type: 'choice',
            text: 'Please select your favorite kind of thing:',
            options: [{
                text: 'I like animals',
                nextSection: 'animals',
                field: null,
                value: null
            },{
                text: 'I like cars',
                nextSection: 'cars',
                field: null,
                value: null
            }],
            optionIndex: null
        },
        animals: {
            id: 'animals',
            text: 'Please select your favorite kind of animal',
            type: 'choice',
            options: [{
                text: 'I like dogs',
                nextSection: 'dogs',
                field: null,
                value: null
            },{
                text: 'I like cats',
                nextSection: null,
                field: null,
                value: null
            },{
                text: 'I like birds',
                nextSection: 'birds',
                field: null,
                value: null
            }],
            optionIndex: null
        },
        cars: {
            id: 'cars',
            text: 'Please describe your ideal car',
            type: 'text',
            field: 'Description',
            nextSection: 'carColor',
            exampleValue: "Suggested Template:<br/><br/>I want a car with 4 seats and a steering wheel."
        },
        carColor: {
            id: 'carColor',
            text: 'what color would your ideal car be?',
            type: 'text',
            field: 'Notes',
            nextSection: null
        },
        dogs: {
            text: 'Please select your favorite kind of dog',
            type: 'choice',
            id: 'dogs',
            options: [{
                text: 'I like mutts',
                nextSection: 'mutts',
                field: "Name",
                value: 'I like mutts'
            },{
                text: 'I like poodles',
                nextSection: 'poodles',
                field: "Name",
                value: 'I like poodles'
            }],
            optionIndex: null
        }
    },


    getRootConfig: function(){
        if (!this.panels || Ext.Object.isEmpty(this.panels) || !this.panels.root){
            this.panels = {
                root: {
                    key: 'root',
                    text: '',
                    type: this.TYPE_CHOICE,
                    choices: []
                }
            };
        }
        return this.panels.root;
    }
});
Ext.define('CA.agile.technicalservices.SurveyContainer',{
    extend: 'Ext.container.Container',
    alias: 'widget.surveycontainer',

    config: {
        itemId: 'questionCt'
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.surveyContainerCfg = config.surveyContainerCfg;
        this.record = config.record;

        this.callParent([this.config]);
    },
    initComponent: function() {

        var cfg = this.surveyContainerCfg,
            items = this._getNoItems();

        if (cfg){
            if (cfg.type === 'text'){
                items = this._getDescriptionItems(cfg);
            } else {
                items =  this._getChoiceItems(cfg);
            }
        }
        this.items = items;
        this.callParent(arguments);
    },
    _getNoItems: function() {
        return [{
            xtype: 'container',
            html: '<div class="survey-title">Survey Completed</div>'
        }];
    },
    _getChoiceItems: function(cfg){
        var items = [],
            options = cfg.options;

        if (options.length > 0){
            items.push({
                xtype: 'container',
                html: cfg.text,
                cls: 'survey-instructions',
                padding: 10,
                margin: 10
            });

            for (var i=0; i<cfg.options.length; i++){
                var opt = options[i];
                if (opt){
                    console.log('opt', opt.nextSection, i);
                    var checked = cfg.value === i;
                    console.log('checked', checked, cfg.value, cfg);

                    items.push({
                        xtype: 'rallyradiofield',
                        boxLabel: opt.text,
                        name: 'optChoice',
                        inputValue: i,
                        value: checked,
                        margin: '20 10 20 30',
                        boxLabelAlign: 'after',
                        boxLabelCls: 'survey-question',
                        listeners: {
                            change: this.choiceUpdated,
                            scope: this
                        }
                    });
                }
            }
        }
        console.log('_getChoiceItems', items);
        return items;
    },
    choiceUpdated: function(radioBtn){
        console.log('choice updated', radioBtn);
        if (radioBtn.value === true){
            this.fireEvent('choiceupdated', radioBtn.inputValue);
        }
    },
    _getDescriptionItems: function(cfg){
        var subItems = [{
            xtype: 'rallyrichtexteditor',
            itemId: 'rteDescription',
            value: cfg.value || this.record && this.record.get(cfg.field) || "",
            margin: 5,
            flex: 1,
            frame: true,
            minHeight: 200 + 53,
            width: '50%'
        }];

        if (cfg.exampleValue){
            subItems.push({
                xtype: 'container',
                itemId: 'rteExample',
                padding: 10,
                readOnly: true,
                html: cfg.exampleValue,
                margin: 5,
                minHeight: 200 + 53,
                border: 1,
                style: {
                    borderColor: '#ccc',
                    borderStyle: 'solid',
                    borderRadius: 3
                },
                width: '50%'
            });
        }

        return [{
            xtype: 'container',
            html: cfg.text,
            cls: 'survey-instructions',
            padding: 10
        },{
            xtype: 'container',
            layout: 'hbox',
            padding: 10,
            items: subItems
        }];
    },
    getValue: function() {
        if (!this.surveyContainerCfg){ return null;}

        if (this.surveyContainerCfg.type === 'text'){
            return this.down('#rteDescription').getValue();
        }
        var key = this.down('rallyradiofield[value=true]');
        if (key){
            return key.inputValue;
        }
        return null;
    },
    getNextPanelKey: function(){
        if (!this.surveyContainerCfg){
            return null;
        }

        if (this.surveyContainerCfg.type === 'choice'){
            var optionIdx = this.getValue();
            if (this.surveyContainerCfg.options[optionIdx]){
                return this.surveyContainerCfg.options[optionIdx].nextSection || null;
            }
            return null;
        }
        return this.surveyContainerCfg.nextSection || null;
    },
    validate: function(){

        if (!this.surveyContainerCfg){
            return true;
        }

        console.log('validate', this.getValue(),this.getValue() >= 0);
        if (this.surveyContainerCfg.type === 'choice' && this.getValue() !== null){
            return this.getValue() >= 0;
        }
        return this.down('#rteDescription') && this.down('#rteDescription').getValue() && this.down('#rteDescription').getValue().length > 0;
    }
});
Ext.define('CA.agile.technicalservices.SurveyDriver', {
    mixins: {
        observable: 'Ext.util.Observable'
    },

    surveyData: null,


    constructor: function (config) {
        this.mixins.observable.constructor.call(this, config);

        this._fetchSurveyData(config.surveyConfig).then({
            success: function(data){
                this.surveyData = data;
                this.fireEvent('ready', this);
            },
            failure: function(msg){
                this.fireEvent('problem', msg);
            },
            scope: this
        });
    },
    getFetch: function(){
        return this.surveyData && this.surveyData.fetch || ['FormattedID','Name'];
    },
    getModel: function(){
        return this.surveyData && this.surveyData.model || 'HierarchicalRequirement';
    },
    getFilters: function(){
        return this.surveyData && this.surveyData.filters || [];
    },
    getTitle: function(){},
    getSurveyConfig: function(){
        return this.surveyData;
    },
    getInstuctions: function(){},
    getRootQuestions: function () {
        if (!this.rootQuestions) throw 'DecisionTree: no initial choice(s) specified';
        return this.getQuestions(this.rootQuestions);
    },
    getQuestions: function (questions) {

        if (!questions) return [];
        var list = [];
        for (var i = 0, ln = questions.length; i < ln; i++) {
            var childChoice = this.getQuestion(questions[i]);
            list.push(childChoice);
        }
        return list;

    },
    getQuestion: function (questionKey) {
        if (!(questionKey in this.questions)) return false;
        return this.questions[questionKey];
    },
    getNextQuestions: function(thisQuestion){
        if (!(thisQuestion in this.questions)) return false;
        if (!('children' in this.questions[thisQuestion])) return false;

        var childIds = this.questions[thisQuestion].children;
        return this.getQuestions(childIds);
    },
    _fetchSurveyData: function(config){
        var deferred = Ext.create('Deft.Deferred');

        //todo: retrieve this from preferences
        // add clone to keep from reusing values
        deferred.resolve(Ext.clone(config));

//        deferred.resolve(Ext.create('CA.agile.technicalservices.SurveyConfiguration'));

        return deferred.promise;
    }
});

Ext.define('CA.agile.technicalservices.SurveyPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tssurveypanel',

    requires: [
        'Rally.ui.Button'
    ],

    logger: new Rally.technicalservices.Logger(),
   // border: false,
   // closable: false,
    ui: 'info-box',
    hideCollapseTool: true,
    collapsible: true,
    collapsed: false,
    height: 400,
    width: '100%',
    collapseDirection: 'right',
    headerPosition: 'left',
    header: true,
    cls: 'detail-panel',

    padding: 10,
    overflowY: 'auto',

    config: {
        /**
         * @cfg {Rally.data.wsapi.Model} (required)
         * The record that the new comment belongs to.
         */
        record: null,
        surveyConfig: null,
        nextText: 'Next >',
        submitText: 'Submit',
        previousText: '< Back'
    },

    dockedItems: [{
        xtype: 'container',
        dock: 'top',
        items: [{
            xtype: 'container',
            flex: 1,
            layout: 'hbox',
            items: [{
                xtype: 'container',
                flex: 1,
                itemId: 'panelTitle',
                tpl: '<tpl><div class="survey-title">{title} for {initiativeID}</div><div class="survey-description">{instructions}</div></tpl>'
            }]
        }]
    },{
        xtype: 'toolbar',
        dock: 'bottom',
        layout: {
            type: 'hbox',
            pack: 'center'
        },
        ui: 'footer',
        itemId: 'footer'
    }],

    bubbleEvents: ['failure'],

    constructor: function(config){
        this.mergeConfig(config);

        this.survey = Ext.create('CA.agile.technicalservices.Survey',config.surveyConfig);
        this.survey.setRecord(this.record);

        this.callParent([this.config]);
    },
    initComponent: function() {

        this.callParent(arguments);

        this.down('#panelTitle').update({
            title: this.survey.getTitle(),
            instructions: this.survey.getInstructions(),
            initiativeID: this.survey.getID()
        });

        this.drawFooter();

        this._initializeSurvey();

    },
    drawFooter: function(){
        this.logger.log('drawFooter');
        this.down('#footer').add([
            {
                xtype: 'rallybutton',
                text: 'Cancel',
                float: 'left',
                cls: ['commentActionButton', 'commentCancel', 'secondary', 'rly-small'],
                handler: this._cancel,
                scope: this

            },{
                xtype: 'container',
                flex: 1
            },{

                xtype: 'rallybutton',
                text: this.previousText,
                itemId: 'backButton',
                disabled: true,
                cls: ['commentActionButton', 'commentCancel', 'secondary', 'rly-small'],
                handler: this._previousQuestion,
                scope: this
            },
            {
                xtype: 'rallybutton',
                itemId: 'nextButton',
                text: this.nextText,
                cls: ['commentActionButton', 'commentSave', 'primary', 'rly-small'],
                handler: this._nextQuestion,
                scope: this
            },{
                xtype: 'container',
                flex: 1
            },{
                xtype: 'rallybutton',
                itemId: 'submitButton',
                text: this.submitText,
                cls: ['commentActionButton', 'commentSave', 'primary', 'rly-small'],
                handler: this._submit,
                scope: this,
                float: 'right',
                visible: false
            }
        ]);
        this.down('#submitButton').setVisible(false);
    },
    _cancel: function() {
    	this.survey.clearValues();
        this.fireEvent('cancel');
        this.close();
    },
    _submit: function(){


        if (!this._getSurveyContainer().validate()){
            Rally.ui.notify.Notifier.showWarning({message: 'Please select a choice or enter a text value.'});
            return;
        }

         this.survey.submit(this._getSurveyContainer().getValue(), this.preview).then({
            success: function(record){
                this.fireEvent('submit', record);
            },
            failure: function(msg){
                this.fireEvent('failure', msg);
            },
            scope: this
        }).always(function(){ this.close(); }, this);
    },
    _nextQuestion: function(){

        if (!this._getSurveyContainer().validate()){
            Rally.ui.notify.Notifier.showWarning({message: "Please select a choice or enter a text value."});
            return;
        }
        this.survey.setValue(this._getSurveyContainer().getValue());
        var cfg = this.survey.getPanelCfg(this._getSurveyContainer().getNextPanelKey());
        this._updatePanel(cfg);
    },
    _previousQuestion: function(){

        var cfg = this.survey.getPreviousPanelCfg();
        this._updatePanel(cfg);
    },
    _initializeSurvey: function(){
        if(!this.rendered){
            this.on('afterrender', this._initializeSurvey, this);
            return;
        }
        var cfg = this.survey.getPanelCfg();
        this._updatePanel(cfg);
    },
    close: function(){
        this.survey.destroy();
        this.fireEvent('destroy');
        this.destroy();
    },
    _getSurveyContainer: function(){
        return this.down('surveycontainer');
    },
    _updatePanel: function(panelCfg){
        if (this._getSurveyContainer()){ this._getSurveyContainer().destroy(); }

        var ct = this.add({
            xtype: 'surveycontainer',
            surveyContainerCfg: panelCfg,
            record: this.record
        });
        ct.on('choiceupdated', this._updateButtons, this);

        if (panelCfg.type === 'choice'){
            this._updateButtons(panelCfg.value);
        } else {
            this._updateButtons();
        }

    },
    _updateButtons: function(choiceValue){
        console.log('choiceValue', choiceValue);
        var isLast = this.survey.isLast(choiceValue);

        this.down('#backButton').setDisabled(this.survey.isFirst());
        this.down('#submitButton').setVisible(isLast);
        this.down('#nextButton').setDisabled(isLast);
    }
});
Ext.define("questionaire", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    padding: 10,
    
    defaults: { margin: 10 },

    integrationHeaders : {
        name : "questionaire"
    },
    config: {
        defaultSettings: {
            appMode: 'admin',
            surveyType: 'PortfolioItem/Initiative',
            surveyTitle: 'My Survey Title',
            surveyQuery: '',
            panels: null
        }
    },
    surveyDriver: null,

    MODE_ADMIN: 'admin',
    MODE_PREVIEW: 'preview',
    MODE_PUBLISH: 'publish',

    launch: function() {
        var appMode = this.getAppMode();

        this.removeAll();

        if (!this.isUserAdmin() && appMode === this.MODE_ADMIN){
            this.addAppMessage("You need to be an administrator to create and publish a survey that modifies Portfolio Items.");
            return;
        }

        var config = {
            surveyTitle: this.getSurveyTitle(),
            surveyType: this.getSurveyType() ,
            listeners: {
                ready: this.launchApp,
                scope: this,
                initerror: this.showErrorNotification,
                surveysaved: this.showSuccess
            }
        };
        
        var setting_filter = this.getSetting('queryFilter');
        this.logger.log("Setting Filter: ", setting_filter);

        if ( ! Ext.isEmpty(setting_filter)) {
            setting_filter = setting_filter.replace(/\{user\}/,this.getContext().getUser()._ref);
            config.filters = Rally.data.wsapi.Filter.fromQueryString(setting_filter);
        }
        var surveyConfig = Ext.create('CA.agile.technicalservices.SurveyConfiguration',config);
    },
    launchApp: function(surveyConfig){
        var appMode = this.getAppMode();
        this.logger.log('launchApp', surveyConfig);

        if (appMode === this.MODE_ADMIN){ // || !this.getSurveyPanelConfig() || this.getSurveyPanelConfig().length === 0){
            this.launchAdminMode(surveyConfig);
        } else {
            this.launchSurveyMode(appMode === this.MODE_PREVIEW, surveyConfig);
        }
    },
    launchAdminMode: function(surveyConfig){
        this.logger.log('launchAdminMode', surveyConfig);

        this.removeAll();

//        this.add({
//            xtype: 'rallybutton',
//            text: 'Save',
//            width: 100,
//            handler: this.saveConfiguration,
//            scope: this
//        });

        this.add({
            xtype: 'rallybutton',
            text: 'Preview',
            width: 100,
            handler: this.previewConfiguration,
            scope: this
        });

        this.add({
            xtype: 'surveyconfigurationview',
            surveyPanelCfg: surveyConfig,
            width: '99%'
        });
    },
    previewConfiguration: function(){
        var adminPanel = this.down('surveyconfigurationview');
        this.logger.log('previewConfiguration', adminPanel.getSurveyConfig());
        this.launchSurveyMode(true, adminPanel.getSurveyConfig());
    },
    saveConfiguration: function(surveyConfig){
        
        if (!surveyConfig || surveyConfig.xtype == "rallybutton" ){
            var adminPanel = this.down('surveyconfigurationview');
            surveyConfig = adminPanel.getSurveyConfig();
        }

        this.logger.log('saveConfiguration', surveyConfig);
        if (surveyConfig){
            surveyConfig.saveConfiguration();
        }

    },
    launchSurveyMode: function(preview, surveyConfig){
        this.logger.log('launchSurveyMode', preview, surveyConfig);

        this.addBoxes(preview);

        this.preview = preview;
        var driver = Ext.create('CA.agile.technicalservices.SurveyDriver',{
            surveyConfig: surveyConfig
        });
        this.initializeApp(driver, surveyConfig);
    },
    initializeApp: function(driver, surveyConfig){
        this.surveyDriver = driver;
        this.logger.log('initializeApp', this.surveyDriver);
        if (this.preview){

            if (this.getAppMode() === this.MODE_ADMIN){
                this.getPreviewBox().add({
                    xtype: 'rallybutton',
                    text: 'Edit Survey',
                    width: 100,
                    handler: function(){
                        this.launchAdminMode(surveyConfig);
                    },
                    scope: this
                });
                this.getPreviewBox().add({
                    xtype: 'rallybutton',
                    text: 'Save',
                    width: 100,
                    handler: function(){
                        this.saveConfiguration(surveyConfig);
                    },
                    scope: this
                });

            }
            this.getPreviewBox().add({
                xtype: 'container',
                html: '<div class="survey-question"  style="color:red;">Preview Mode - no records will be updated.</div>'
            });

        }
        var grid = this.getGridBox().add({
            xtype: 'rallygrid',
            storeConfig: {
                model: this.surveyDriver.getModel(),
                fetch: this.surveyDriver.getFetch(),
                filters: this.surveyDriver.getFilters(),
                listeners: {
                    scope: this,
                    load: function(store,records,successful) {
                        if ( !successful ) { 
                            this.showErrorNotification('Problem loading records.  Please check query.');
                        }
                    }
                }
            },
            columnCfgs: this.surveyDriver.getFetch(),
            height: 450
        });
        grid.on('itemdblclick', this.launchSurvey, this);
    },
    launchSurvey: function(grid, record){
        this.getSurveyBox().removeAll();

        this.logger.log('launchSurvey', record.get('FormattedID'));
        this.down('rallygrid').hide();
        
        var surveyPanel = this.getSurveyBox().add({
            xtype: 'tssurveypanel',
            width: this.getWidth(),
            surveyDriver: this.surveyDriver,
            surveyConfig: this.surveyDriver.getSurveyConfig(),
            record: record,
            preview: this.preview
        });
        surveyPanel.on('submit', this.showSuccess, this);
        surveyPanel.on('failure', this.showErrorNotification, this);
        surveyPanel.on('destroy', this.showGrid, this);
    },
    addBoxes: function(preview){
        this.removeAll();
        if (preview){
            this.add({xtype:'container',itemId:'preview_box',flex:1,layout:'hbox'});
        }
        this.add({xtype:'container',itemId:'grid_box', flex: 1});
        this.add({xtype:'container',itemId:'survey_box'});
    },
    showGrid: function(){
        if (this.down('rallygrid')){
            this.down('rallygrid').show();
        }
    },
    showSuccess: function(successObj){
        if (!successObj){
            successObj = "Success";
        }

        if (Ext.isString(successObj)){
            Rally.ui.notify.Notifier.show({message: successObj, allowHTML: true});
        } else {
            Rally.ui.notify.Notifier.showUpdate({artifact: successObj});
        }

    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg });
    },
    addAppMessage: function(msg){
        this.add({
            xtype: 'container',
            html: Ext.String.format('<div class="survey-question">{0}</div>',msg)
        });
    },
    getGridBox: function(){
        return this.down('#grid_box');
    },
    getSurveyBox: function(){
        return this.down('#survey_box');
    },
    getPreviewBox: function(){
        return this.down('#preview_box');
    },
    getSurveyPanelConfig: function(){
        var panelSetting = this.getSetting('panels');
        if (!panelSetting){
            return null;
        }
        var panels = [];
        return panels;

    },
    getSurveyType: function(){
        return this.getSetting('surveyType');
    },
    getSurveyTitle: function(){
        return this.getSetting('surveyTitle');
    },
    isUserAdmin: function(){
        return CA.agile.technicalservices.Toolbox.isUserWorkspaceAdmin(this.getContext());
    },
    getAppMode: function(){
        return this.getSetting('appMode');
    },
    getSettingsFields: function(){
        var isUserAdmin = this.isUserAdmin(),
            appMode = this.getAppMode(),
            surveyType = this.getSurveyType(),
            labelWidth = 125,
            settings = [{
                xtype: 'container',
                margin: '0 0 15 0',
                html: '<div class="rally-upper-bold">App Mode</div>'
            },{
                xtype: 'rallyradiofield',
                name: 'appMode',
                fieldLabel: 'Admin',
                labelAlign: 'right',
                boxLabel: '<i>Edit the survey contents in this mode.<i>',
                inputValue: this.MODE_ADMIN,
                value: appMode == this.MODE_ADMIN,
                labelWidth: labelWidth
            },{
                xtype: 'rallyradiofield',
                name: 'appMode',
                fieldLabel: 'Preview',
                labelAlign: 'right',
                boxLabel: '<i>(For Testing Only) The app will NOT modify Portfolio Items in this mode.</i>',
                inputValue: this.MODE_PREVIEW,
                value: appMode == this.MODE_PREVIEW,
                labelWidth: labelWidth
            }];

        if (isUserAdmin){
            settings.push({
                xtype: 'rallyradiofield',
                name: 'appMode',
                fieldLabel: 'Publish (Admin Only)',
                labelAlign: 'right',
                boxLabel: '<i>(For Production Only) The app WILL modify Portfolio Items in this mode.</i>',
                inputValue: this.MODE_PUBLISH,
                value: appMode == this.MODE_PUBLISH,
                labelWidth: labelWidth

            });
        }

        settings.push({
            xtype: 'container',
            margin: '25 0 15 0',
            html: '<div class="rally-upper-bold">Survey Configuration</div>'
        });
        settings.push({
            xtype: 'rallytextfield',
            fieldLabel: 'Survey Title',
            labelAlign: 'right',
            name: 'surveyTitle',
            labelWidth: labelWidth,
            width: 300
        });
        //settings.push({
        //    xtype: 'rallyportfolioitemtypecombobox',
        //    fieldLabel: 'Portfolio Item Type',
        //    labelAlign: 'right',
        //    name: 'surveyType',
        //    labelWidth: labelWidth,
        //    value: surveyType,
        //    width: 300,
        //    listeners: {
        //        ready: function(cb){
        //            console.log('ready', surveyType);
        //            cb.setValue(surveyType);
        //        }
        //    }
        //});
        settings.push({
            xtype: 'textarea',
            fieldLabel: 'Query',
            name: 'queryFilter',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            labelAlign: 'right',
            labelWidth: labelWidth,
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: true,
            validateOnChange: true,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        });

        return settings;
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('questionaire', {
                   name: 'Questionaire'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}


.survey-title {
    color: #888888;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 12px;
    padding-top: 5px;
}

.survey-description {
    bottom: 7px;
    color: #888888;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
    width: 100%;
}

.detail-panel {
    border-left-style: solid;
    border-left-width: 5px;
    border-left-color: #d6d6d6;
}

.detail-collapse-button {
    background-color: transparent;
    color: #a9a9a9;
    font-size: 16px;
    line-height: 12px;
    vertical-align: middle;
    margin: 10px 0 0 0;
    padding: 10px 0 0 0;
    right: 8px;
    top: 16px;
    z-index: 2;
}

.survey-question {
    color: #000000;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 14px;
    margin-left: 15px;
}

.survey-instructions {
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 14px;
    margin-left: 15px;
    color: #000000;
}

.rally-upper-bold {
    color: #222;
    cursor: default;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 11px;
    font-weight: normal;
    line-height: 12px;
    text-transform: uppercase;
    vertical-align: top;
}

.rally-panel-header {
    font-size: 10px;
    background-color: #e6e6e6;
}

.checkbox-label {
    vertical-align: bottom;
    margin-left: 15px;
}

label.x-item-disabled {
    color: #000!important;
}

.title-question {
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
    color: #888;
}

.config-question {
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 14px;
    color: #888;
    margin: 10px;
    width: 95%;
}

.button-no-border {
    border-color: #fff!important;
    background-color: #fff;
    color: #888!important;
    font-size: 14px;
}

.button-no-border .x-btn-inner-center{
    color: #888!important;
}

.danger-button {
    color: #B81B10;!important;
    border-color: #B81B10!important;
    background-color: #fff;
    font-size: 14px;
    border-width: 1px!important;
    margin: 5px;
}

.danger-button .x-btn-inner-center {
    color: #B81B10;!important;
}

.add-new-section {
    color: #000!important;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 14px;
    font-style: italic;
}
    </style>

</head>
<body></body>
</html>