<!DOCTYPE html>
<html>
<head>
    <title>Questionaire</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Dec 05 2016 16:04:49 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Dec 05 2016 16:04:49 GMT-0700 (MST)";
        var STORY    = "F166";
        var BUILDER  = "kcorkan";
        var CHECKSUM = 19362501617;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) -->
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.agile.technicalservices.Survey',{
    constructor: function(config){
        Ext.apply(this, config);
        this.questionPath = [];
        console.log('CA.agile.technicalservices.Survey', this);
    },
    getTitle: function(){
        return this.title;
    },
    getInstructions: function(){
        return this.instructions;
    },
    setRecord: function(record){
        this.record = record;
    },
    getID: function(){
        console.log('getID', this.record.get('FormattedID'));
        return this.record && this.record.get('FormattedID') || "Unknown";
    },
    getRootKey: function(){
        return Ext.Object.getKeys(this.questionMap)[0];
    },
    getInitialContainerConfig: function(){
        var containerKey = this.startContainer;
        this.questionPath = [containerKey];
        return this.getQuestionConfig(containerKey);
    },
    getNextContainerConfig: function(currentContainerKey,containerValue){
        //get the next container in the tree.
        console.log('getNextContainerConfig', currentContainerKey, containerValue);
        this.questionPath.push(containerValue);
        this.questions[currentContainerKey].value = containerValue;
        return this.getQuestionConfig(containerValue);
    },
    getPreviousContainerConfig: function(currentContainerKey, containerValue){

        this.questions[currentContainerKey].value = containerValue;
        //now remove the current index from the path
        this.questionPath = this.questionPath.splice(this.questionPath.length-1,1);
        return this.getQuestionConfig(this.questionPath[this.questionPath.length-1]);
    },
    getQuestionMap: function(questionKey){
        var map = this.questionMap;
        Ext.Array.each(this.questionPath, function(key){
            map = map[key] || null;
            if (!map){ return false; }
            if (questionKey === key){
                return false;
            }
        });
        return map;
    },
    getQuestionConfig: function(key){
        var question = this.questions[key],
            hasChildren = false;
        if (!question){
            return null;
        }

        var childrenKeys = question.children || [],
            children = [];
        Ext.Array.map(childrenKeys, function(c){
            var child = this.questions[c];
            if (child){
                child.key = c;
            }
            children.push(child);
            if (child.children && child.children.length > 0){
                hasChildren = true;
            }
        }, this);

        return {
            xtype: question.childType,
            instructions: question.childInstructions,
            questions: children,
            record: this.record,
            key: key,
            hasChildren: hasChildren
        };
    },
    submit: function(currentContainerKey,containerValue){
        var deferred = Ext.create('Deft.Deferred');
        this.questionPath.push(containerValue);
        this.questions[currentContainerKey].value = containerValue;

        var updates = {};
        Ext.Array.each(this.questionPath, function(key){
            var question = this.questions[key];
            if (question.updates){
                Ext.Object.each(question.updates, function(field,value){
                    //if (/\{value\}/.test(value)){
                    //    value = question.value;
                    //}
                    console.log('updates', field, value);
                    updates[field] = value
                });
            }
        }, this);
        console.log('submit', updates);

        deferred.resolve(this.record);

        return deferred;
    },
    isFirstButton: function(){
        return (this.questionPath.length === 1);
    }
});
Ext.define('CA.agile.technicalservices.SurveyConfiguration',{

    model: 'PortfolioItem/Initiative',
    fetch: ['FormattedID','Name'],
    filters: [],

    title: 'Financial Survey',
    instructions: null,

    //startQuestions: ['animals', 'cars'],
    startContainer: 'things',

    questionMap: {
        things: {
            animals: {
                cats: {
                    "maine-coon": null,
                    tabby: null,
                    persian: null
                },
                dogs: {
                    poodles: null,
                    goldenRetrievers: null,
                    mutts: null
                },
                birds: {
                    "blue-jay": null,
                    cardinal: null,
                    oriole: null
                }
            },
            cars: {
                carDescription: null
            }
        }
    },

    questions: {
        things: {
            childType: 'surveycontainerradio',
            childInstructions: 'Please select your favorite kind of thing:',
            children: ['animals','cars'],
            key: 'things'
        },
        carDescription:{
            question: 'Please describe your ideal car',
            exampleValue: 'Expected Description:<br/><br/>I like vintage airstream campers.' ,
            updates: [{
                field: 'Description',
                value: '{value}'
            }],
            field: 'Description',
            key: 'carDescription'

        },
        'animals': {
            question: 'I like animals more than cars',
            updates: {
                Name: "I like animals",
                Description: "I like animals more than cars"
            },
            childInstructions: 'Please select your favorite kind of animal',
            childType: 'surveycontainerradio',
            children: ['cats','dogs','birds'],
            key: 'animals'
        },
        'cars': {
            question: 'I like cars more than animals',
            updates: {
                Name: "I like cars",
                Description: "I like cars more than animals"
            },
            childInstructions: "Please describe your ideal car",
            childType: 'surveytypedescriptiontemplate',
            children: ['carDescription'],
            key: 'cars'
        },
        'cats': {
            question: 'I like cats the best',
            childInstructions: 'Please select your favorite kind of cat',
            childType: 'surveycontainerradio',
            children: ["maine-coon",'tabby','persian'],
            key: 'cats',
            updates: {
                Name: "I like cats",
                Description: "I like cats"
            }
        },
        'dogs': {
            question: 'I like dogs the most',
            childInstructions: 'Please select your favorite kind of dog',
            childType: 'surveycontainerradio',
            children: ['poodles','goldenRetrievers','mutts'],
            key: 'dogs',
            updates: {
                Name: "I like dogs",
                Description: "I like dogs"
            }
        },
        'birds': {
            question: 'I like birds',
            childInstructions: 'Please select your favorite kind of bird',
            childType: 'surveycontainerradio',
            children: ['blue-jays','cardinals','orioles'],
            key: 'birds',
            updates: {
                Name: "I like birds",
                Description: "I like birds"
            }
        },
        'maine-coon': {
            question: 'Maine-coons with their squeaky voices and huge tails are the best',
            key: 'maine-coon',
            updates: {
                Description: "Maine-coons with their squeaky voices and huge tails are the best"
            }
        },
        'tabby': {
            question: 'Tabby have the best coloring',
            key: 'tabby',
            updates: {
                Description: "Tabby have the best coloring"
            }
        },
        'persian': {
            question: 'Persian cats have attitude',
            key: 'persian',
            updates: {
                Description: "Persian cats have attitude"
            }
        },
        'poodles': {
            question: 'Poodles are awesome because they dont shed',
            key: 'poodles',
            updates: {
                Description: "Poodles are awesome because they dont shed"
            }
        },
        'goldenRetrievers': {
            question: 'Golden Retrievers are so loyal and sweet.',
            key: 'goldenRetrievers',
            updates: {
                Description: 'Golden Retrievers are so loyal and sweet.'
            }
        },
        'mutts': {
            question: 'Mutts are the best',
            key: 'mutts',
            updates: {
                Description: 'Mutts are the best'
            }
        },
        'blue-jay': {
            question: 'Blue jays have the most beautiful colors',
            key: 'blue-jay',
            updates: {
                Description: 'Blue jays have the most beautiful colors'
            }
        },
        'cardinal': {
            question: 'Cardinals are bold and red',
            key: 'cardinal',
            updates: {
                Description: 'Cardinals are bold and red'
            }
        },
        'oriole': {
            question: 'Orioles are a neat bird, but named after a baseball team that loses to the Pirates all the time',
            key: 'oriole',
            updates: {
                Description: 'Orioles are a neat bird, but named after a baseball team that loses to the Pirates all the time'
            }
        }
    }
});
Ext.define('CA.agile.technicalservices.surveycontainer.Description',{
    extend: 'Ext.container.Container',
    alias: 'widget.surveytypedescriptiontemplate',

    config: {
        itemId: 'questionCt'
    },

    /**
     *
     * questions configuration
     *  words: 'Please describe your ideal animal' (question instructions)
     *  exampleValue: 'Expected Description:<br/><br/>I like tubby orange cats.'  (template description)
     *  field: 'Description'  (field to update)
     */

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {

        var question = this.questions[0];

        this.items = [{
            xtype: 'container',
            html: this.instructions,
            cls: 'survey-instructions',
            padding: 10
        },{
            xtype: 'container',
            layout: 'hbox',
            padding: 10,
            items: [{
                xtype: 'rallyrichtexteditor',
                itemId: 'rteDescription',
                value: question.value || this.record.get(question.field),
                margin: 5,
                flex: 1,
                frame: true,
                minHeight: 200 + 53,
                width: '50%'
            },{
                xtype: 'container',
                itemId: 'rteExample',
                padding: 10,
                readOnly: true,
                html: question.exampleValue,
                margin: 5,
                minHeight: 200 + 53,
                border: 1,
                style: {
                    borderColor: '#ccc',
                    borderStyle: 'solid',
                    borderRadius: 3
                },
                width: '50%'
            }]
        }];

        this.callParent(arguments);
    },

    getValue: function() {
        return this.down('#rteDescription').getValue();
    },
    getKey: function(){
        return this.key;
    },
    validate: function(){
        //todo: make sure a value is selected.
    }
});
Ext.define('CA.agile.technicalservices.surveycontainer.Radio',{
    extend: 'Ext.container.Container',
    alias: 'widget.surveycontainerradio',

    config: {
        itemId: 'questionCt'
    },

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {

        var questions = this.questions,
            items = [];

        if (questions.length > 0){
            items.push({
                xtype: 'container',
                html: this.instructions,
                cls: 'survey-instructions',
                padding: 10,
                margin: 10
            });
            Ext.Array.each(questions, function(q){
                console.log('q', q.key);
                if (q){
                    items.push({
                        xtype: 'rallyradiofield',
                        boxLabel: q.question,
                        name: 'q1',
                        inputValue: q.key,
                        value: q.value,
                        margin: '20 10 20 30',
                        boxLabelAlign: 'after',
                        boxLabelCls: 'survey-question'
                    });
                }
            });
        }
        this.items = items;
        this.callParent(arguments);
    },

    getValue: function() {
        var key = this.down('rallyradiofield[value=true]');
        return key && key.inputValue;
    },
    getKey: function(){
        return this.key;
    },
    validate: function(){
        //todo: make sure a value is selected.
        return true;
    }
});
Ext.define('CA.agile.technicalservices.SurveyDriver', {
    mixins: {
        observable: 'Ext.util.Observable'
    },

    surveyData: null,


    constructor: function (config) {
        this.mixins.observable.constructor.call(this, config);

        this._fetchSurveyData(config).then({
            success: function(data){
                this.surveyData = data;
                this.fireEvent('ready', this);
            },
            failure: function(msg){
                this.fireEvent('problem', msg);
            },
            scope: this
        });
    },
    getFetch: function(){
        return this.surveyData && this.surveyData.fetch || ['FormattedID','Name'];
    },
    getModel: function(){
        return this.surveyData && this.surveyData.model || 'HierarchicalRequirement';
    },
    getFilters: function(){
        return this.surveyData && this.surveyData.filters || [];
    },
    getTitle: function(){},
    getSurveyConfig: function(){
        return this.surveyData;
    },
    getInstuctions: function(){},
    getRootQuestions: function () {
        if (!this.rootQuestions) throw 'DecisionTree: no initial choice(s) specified';
        return this.getQuestions(this.rootQuestions);
    },
    getQuestions: function (questions) {

        if (!questions) return [];
        var list = [];
        for (var i = 0, ln = questions.length; i < ln; i++) {
            var childChoice = this.getQuestion(questions[i]);
            list.push(childChoice);
        }
        return list;

    },
    getQuestion: function (questionKey) {
        if (!(questionKey in this.questions)) return false;
        return this.questions[questionKey];
    },
    getNextQuestions: function(thisQuestion){
        if (!(thisQuestion in this.questions)) return false;
        if (!('children' in this.questions[thisQuestion])) return false;

        var childIds = this.questions[thisQuestion].children;
        return this.getQuestions(childIds);
    },
    _fetchSurveyData: function(config){
        var deferred = Ext.create('Deft.Deferred');

        //todo: retrieve this from preferences
        deferred.resolve(Ext.create('CA.agile.technicalservices.SurveyConfiguration'));

        return deferred.promise;
    }
});

Ext.define('CA.agile.technicalservices.SurveyPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tssurveypanel',

    requires: [
        'Rally.ui.Button'
    ],

    logger: new Rally.technicalservices.Logger(),
   // border: false,
   // closable: false,
    ui: 'info-box',
    hideCollapseTool: true,
    collapsible: true,
    collapsed: false,
    height: 500,
    collapseDirection: 'right',
    headerPosition: 'left',
    header: true,
    cls: 'detail-panel',

    padding: 10,
    overflowY: 'auto',

    config: {
        /**
         * @cfg {Rally.data.wsapi.Model} (required)
         * The record that the new comment belongs to.
         */
        record: null,
        surveyConfig: null,
        nextText: 'Next >',
        submitText: 'Submit',
        previousText: '< Back'
    },

    dockedItems: [{
        xtype: 'container',
        dock: 'top',
        items: [{
            xtype: 'container',
            flex: 1,
            layout: 'hbox',
            items: [{
                xtype: 'rallybutton',
                cls: 'detail-collapse-button icon-leave',
                width: 18,
                margin: '0 10 0 25',
                userAction: 'Close (X) filter panel clicked',
                listeners: {
                    click: this.close
                }
            },{
                xtype: 'container',
                flex: 1,
                itemId: 'panelTitle',
                tpl: '<tpl><div class="survey-title">{title} for {initiativeID}</div><div class="survey-description">{instructions}</div></tpl>'
            }]
        }]
    },{
        xtype: 'toolbar',
        dock: 'bottom',
        layout: {
            type: 'hbox',
            pack: 'center'
        },
        ui: 'footer',
        itemId: 'footer'
    }],

    bubbleEvents: ['failure'],

    constructor: function(config){
        this.mergeConfig(config);
        console.log('config', config, this.config);

        this.survey = Ext.create('CA.agile.technicalservices.Survey',config.surveyConfig);
        this.survey.setRecord(this.record);

        this.callParent([this.config]);
    },

    initComponent: function() {

        this.callParent(arguments);

        this.down('#panelTitle').update({
            title: this.survey.getTitle(),
            instructions: this.survey.getInstructions(),
            initiativeID: this.survey.getID()
        });

        this.drawFooter();

        this._initializeSurvey();

    },
    drawFooter: function(){
        this.logger.log('drawFooter');
        this.down('#footer').add([
            {
                xtype: 'rallybutton',
                text: this.previousText,
                itemId: 'backButton',
                disabled: true,
                cls: ['commentActionButton', 'commentCancel', 'secondary', 'rly-small'],
                handler: this._previousQuestion,
                scope: this
            },
            {
                xtype: 'rallybutton',
                itemId: 'nextButton',
                text: this.nextText,
                cls: ['commentActionButton', 'commentSave', 'primary', 'rly-small'],
                handler: this._nextQuestion,
                scope: this
            },
            {
                xtype: 'rallybutton',
                itemId: 'submitButton',
                text: this.submitText,
                cls: ['commentActionButton', 'commentSave', 'primary', 'rly-small'],
                handler: this._submit,
                scope: this,
                visible: false
            }
        ]);
        this.down('#submitButton').setVisible(false);
    },
    _cancel: function() {
        this.fireEvent('cancel');
        this.close();
    },
    _submit: function(){

        if (!this.getQuestionCt().validate()){
            return;
        }
        this.survey.submit(this.getQuestionCt().getKey(),this.getQuestionCt().getValue()).then({
            success: function(record){
                this.fireEvent('submit', record);
            },
            failure: function(msg){
                this.fireEvent('failure', msg);
            },
            scope: this
        }).always(function(){ this.close(); }, this);
    },
    _nextQuestion: function(btn){

        if (!this.getQuestionCt().validate()){
            return;
        }
        var containerCfg = this.survey.getNextContainerConfig(this.getQuestionCt().getKey(), this.getQuestionCt().getValue());

        this.down('#backButton').setDisabled(this.survey.isFirstButton());
        this.down('#submitButton').setVisible(!containerCfg.hasChildren);
        this.down('#nextButton').setDisabled(!containerCfg.hasChildren);

        this._updateQuestion(containerCfg);

    },
    _previousQuestion: function(){
        var containerCfg = this.survey.getPreviousContainerConfig(this.getQuestionCt().getKey(), this.getQuestionCt().getValue());
        this._updateQuestion(containerCfg);
    },
    _initializeSurvey: function(){
        if(!this.rendered){
            this.on('afterrender', this._initializeSurvey, this);
            return;
        }
        var cfg = this.survey.getInitialContainerConfig();
        this._updateQuestion(cfg);
    },
    getQuestionCt: function(){
        return this.down('#questionCt');
    },
    _updateQuestion: function(questionConfig){

        this.logger.log('_updateQuestion, cfg', questionConfig);
        if (this.getQuestionCt()){ this.getQuestionCt().destroy(); }
        this.add(questionConfig);
    },
    close: function(){
        this.survey.destroy();
        this.destroy();
    }
});
Ext.define("questionaire", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    layout: 'hbox',
    items: [
        {xtype:'container',itemId:'grid_box', flex: 1},
        {xtype:'container',itemId:'survey_box'}
    ],

    integrationHeaders : {
        name : "questionaire"
    },
    config: {
        defaultSettings: {

        }
    },

    surveyDriver: null,

    launch: function() {

        Ext.create('CA.agile.technicalservices.SurveyDriver',{
            listeners: {
                ready: this.initializeApp,
                problem: this.showErrorNotification,
                scope: this
            }
        });
    },
    initializeApp: function(surveyDriver){
        this.surveyDriver = surveyDriver;
        this.logger.log('initializeApp', this.surveyDriver);
        var grid = this.getGridBox().add({
            xtype: 'rallygrid',
            storeConfig: {
                model: this.surveyDriver.getModel(),
                fetch: this.surveyDriver.getFetch(),
                filters: this.surveyDriver.getFilters()
            },
            columnCfgs: this.surveyDriver.getFetch()
        });
        grid.on('itemdblclick', this.launchSurvey, this);
    },
    launchSurvey: function(grid, record){
        this.getSurveyBox().removeAll();

        this.logger.log('launchSurvey', record.get('FormattedID'));

        var surveyPanel = this.getSurveyBox().add({
            xtype: 'tssurveypanel',
            width: this.getWidth(),
            surveyConfig: this.surveyDriver.getSurveyConfig(),
            record: record
        });
        surveyPanel.on('submit', this.showSuccess, this);
        surveyPanel.on('failure', this.showErrorNotification, this);
    },
    showSuccess: function(record){
        Rally.ui.notify.Notifier.showUpdate({artifact: record});
    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg });
    },
    getGridBox: function(){
        return this.down('#grid_box');
    },
    getSurveyBox: function(){
        return this.down('#survey_box');
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('questionaire', {
                   name: 'Questionaire'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}


.survey-title {
    color: #888888;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 12px;
    padding-top: 5px;
}

.survey-description {
    bottom: 7px;
    color: #888888;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
    width: 100%;
}

.detail-panel {
    border-left-style: solid;
    border-left-width: 5px;
    border-left-color: #d6d6d6;
}

.detail-collapse-button {
    background-color: transparent;
    color: #a9a9a9;
    font-size: 16px;
    line-height: 12px;
    vertical-align: middle;
    margin: 10px 0 0 0;
    padding: 10px 0 0 0;
    right: 8px;
    top: 16px;
    z-index: 2;
}

.survey-question {
    color: #000000;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 14px;
    margin-left: 15px;
}

.survey-instructions {
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 14px;
    margin-left: 15px;
    color: #000000;
}
    </style>

</head>
<body></body>
</html>